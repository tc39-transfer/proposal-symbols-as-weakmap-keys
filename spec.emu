<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Symbol as WeakMap Keys Proposal
stage: 2
contributors:
  - Robin Ricard
  - Rick Button
  - Daniel Ehrenberg
  - Leo Balter
  - Caridy Pati√±o
  - Rick Waldron
  - Ashley Claymore
</pre>

<emu-clause id="sec-executable-code-and-execution-contexts">
  <h1>Executable Code and Execution Contexts</h1>

  <emu-clause id="sec-weakref-processing-model">
    <h1>Processing Model of WeakRef and FinalizationRegistry Objects</h1>

    <emu-note>
      Full set of proposed changes here: <a href="https://arai-a.github.io/ecma262-compare/?pr=2777">https://arai-a.github.io/ecma262-compare/?pr=2777</a>
    </emu-note>
  </emu-clause>

  <emu-clause id="sec-addtokeptobjects" type="abstract operation">
    <h1>
      AddToKeptObjects (
        <del>_object_: an Object,</del>
        <ins>_value_: an Object or a Symbol,</ins>
      ): ~unused~
    </h1>
    <dl class="header">
    </dl>
    <emu-alg>
      1. Let _agentRecord_ be the surrounding agent's Agent Record.
      1. <del>Append _object_ to _agentRecord_.[[KeptAlive]].</del>
      1. <ins>Append _value_ to _agentRecord_.[[KeptAlive]].</ins>
      1. Return ~unused~.
    </emu-alg>
    <emu-note>
      When the abstract operation AddToKeptObjects is called with a target object <ins>, or symbol,</ins> reference, it adds the target to a list that will point strongly at the target until ClearKeptObjects is called.
    </emu-note>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-canbeheldweakly-abstract-operation" type="abstract operation">
  <h1>
    CanBeHeldWeakly (
      _v_: unknown
    ): a Boolean
  </h1>
  <dl class="header">
  </dl>
  <emu-alg>
    1. If Type(_v_) is Object, return *true*.
    1. If Type(_v_) is Symbol, then
      1. For each element _e_ of the GlobalSymbolRegistry List (see <emu-xref href="#sec-symbol.for"></emu-xref>), do
        1. If SameValue(_e_.[[Symbol]], _v_) is *true*, return *false*.
      1. Return *true*.
    1. Return *false*.
  </emu-alg>
  <emu-note type="editor">
    <p>This abstract operation determines if _v_ is considered to have an identity suitable for a weak reference. i.e. Is _v_ a valid candidate key of a WeakMap, or entry in a WeakSet, or target of a WeakRef or FinalizationRegistry.</p>
    <p>'Registered symbols' are not considered to have a suitable identity because their identity is similar to strings. Implementations may attempt to collect them when they are unreachable.</p>
    <p>'Well-Known symbols' <emu-xref href="#sec-well-known-symbols"></emu-xref> return *true* - this should not be interpreted as evidence that using them as a key in a WeakMap will not result in a memory leak.</p>
  </emu-note>
</emu-clause>

<emu-clause id="sec-modifications-of-weakmap">
  <h1>Modifications to the properties of WeakMap.prototype</h1>

  <emu-clause id="sec-weakmap.prototype.delete">
    <h1>WeakMap.prototype.delete ( _key_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _M_ be the *this* value.
      1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).
      1. Let _entries_ be the List that is _M_.[[WeakMapData]].
      1. <del>If Type(_key_) is not Object, return *false*.</del>
      1. <ins>If CanBeHeldWeakly(_key_) is *false*, return *false*.</ins>
      1. For each Record { [[Key]], [[Value]] } _p_ of _entries_, do
        1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, then
          1. Set _p_.[[Key]] to ~empty~.
          1. Set _p_.[[Value]] to ~empty~.
          1. Return *true*.
      1. Return *false*.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-weakmap.prototype.get">
    <h1>WeakMap.prototype.get ( _key_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _M_ be the *this* value.
      1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).
      1. Let _entries_ be the List that is _M_.[[WeakMapData]].
      1. <del>If Type(_key_) is not Object, return *undefined*.</del>
      1. <ins>If CanBeHeldWeakly(_key_) is *false*, return *undefined*.</ins>
      1. For each Record { [[Key]], [[Value]] } _p_ of _entries_, do
        1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, return _p_.[[Value]].
      1. Return *undefined*.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-weakmap.prototype.has">
    <h1>WeakMap.prototype.has ( _key_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _M_ be the *this* value.
      1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).
      1. Let _entries_ be the List that is _M_.[[WeakMapData]].
      1. <del>If Type(_key_) is not Object, return *false*.</del>
      1. <ins>If CanBeHeldWeakly(_key_) is *false*, return *false*.</ins>
      1. For each Record { [[Key]], [[Value]] } _p_ of _entries_, do
        1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, return *true*.
      1. Return *false*.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-weakmap.prototype.set">
    <h1>WeakMap.prototype.set ( _key_, _value_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _M_ be the *this* value.
      1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).
      1. Let _entries_ be the List that is _M_.[[WeakMapData]].
      1. <del>If Type(_key_) is not Object, throw a *TypeError* exception.</del>
      1. <ins>If CanBeHeldWeakly(_key_) is *false*, throw a *TypeError* exception.</ins>
      1. For each Record { [[Key]], [[Value]] } _p_ of _entries_, do
        1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, then
          1. Set _p_.[[Value]] to _value_.
          1. Return _M_.
      1. Let _p_ be the Record { [[Key]]: _key_, [[Value]]: _value_ }.
      1. Append _p_ as the last element of _entries_.
      1. Return _M_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-modifications-of-weakset">
  <h1>Modifications to the properties of WeakSet.prototype</h1>

  <emu-clause id="sec-weakset.prototype.add">
    <h1>WeakSet.prototype.add ( _value_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _S_ be the *this* value.
      1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).
      1. <del>If Type(_value_) is not Object, throw a *TypeError* exception.</del>
      1. <ins>If CanBeHeldWeakly(_value_) is *false*, throw a *TypeError* exception.</ins>
      1. Let _entries_ be the List that is _S_.[[WeakSetData]].
      1. For each element _e_ of _entries_, do
        1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, then
          1. Return _S_.
      1. Append _value_ as the last element of _entries_.
      1. Return _S_.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-weakset.prototype.delete">
    <h1>WeakSet.prototype.delete ( _value_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _S_ be the *this* value.
      1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).
      1. <del>If Type(_value_) is not Object, return *false*.</del>
      1. <ins>If CanBeHeldWeakly(_value_) is *false*, return *false*.</ins>
      1. Let _entries_ be the List that is _S_.[[WeakSetData]].
      1. For each element _e_ of _entries_, do
        1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, then
          1. Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.
          1. Return *true*.
      1. Return *false*.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-weakset.prototype.has">
    <h1>WeakSet.prototype.has ( _value_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _S_ be the *this* value.
      1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).
      1. Let _entries_ be the List that is _S_.[[WeakSetData]].
      1. <del>If Type(_value_) is not Object, return *false*.</del>
      1. <ins>If CanBeHeldWeakly(_value_) is *false*, return *false*.</ins>
      1. For each element _e_ of _entries_, do
        1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, return *true*.
      1. Return *false*.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-modifications-of-weakref-finalization">
  <h1>Modifications to WeakRef and FinalizationRegistry</h1>

  <emu-clause id="sec-weak-ref-target">
    <h1>WeakRef ( _target_ )</h1>
    <p>When the `WeakRef` function is called with argument _target_, the following steps are taken:</p>
    <emu-alg>
      1. If NewTarget is *undefined*, throw a *TypeError* exception.
      1. <del>If Type(_target_) is not Object, throw a *TypeError* exception.</del>
      1. <ins>If CanBeHeldWeakly(_target_) is *false*, throw a *TypeError* exception.</ins>
      1. Let _weakRef_ be ? OrdinaryCreateFromConstructor(NewTarget, *"%WeakRef.prototype%"*, &laquo; [[WeakRefTarget]] &raquo;).
      1. Perform ! AddToKeptObjects(_target_).
      1. Set _weakRef_.[[WeakRefTarget]] to _target_.
      1. Return _weakRef_.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-finalization-registry.prototype.register">
    <h1>FinalizationRegistry.prototype.register ( _target_, _heldValue_ [ , _unregisterToken_ ] )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _finalizationRegistry_ be the *this* value.
      1. Perform ? RequireInternalSlot(_finalizationRegistry_, [[Cells]]).
      1. <del>If Type(_target_) is not Object, throw a *TypeError* exception.</del>
      1. <ins>If CanBeHeldWeakly(_target_) is *false*, throw a *TypeError* exception.</ins>
      1. If SameValue(_target_, _heldValue_) is *true*, throw a *TypeError* exception.
      1. <del>If Type(_unregisterToken_) is not Object, then</del>
      1. <ins>If CanBeHeldWeakly(_unregisterToken_) is *false*, then</ins>
        1. If _unregisterToken_ is not *undefined*, throw a *TypeError* exception.
        1. Set _unregisterToken_ to ~empty~.
      1. Let _cell_ be the Record { [[WeakRefTarget]]: _target_, [[HeldValue]]: _heldValue_, [[UnregisterToken]]: _unregisterToken_ }.
      1. Append _cell_ to _finalizationRegistry_.[[Cells]].
      1. Return *undefined*.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-finalization-registry.prototype.unregister">
    <h1>FinalizationRegistry.prototype.unregister ( _unregisterToken_ )</h1>
    <p>The following steps are taken:</p>
    <emu-alg>
      1. Let _finalizationRegistry_ be the *this* value.
      1. Perform ? RequireInternalSlot(_finalizationRegistry_, [[Cells]]).
      1. <del>If Type(_unregisterToken_) is not Object, throw a *TypeError* exception.</del>
      1. <ins>If CanBeHeldWeakly(_unregisterToken_) is *false*, throw a *TypeError* exception.</ins>
      1. Let _removed_ be *false*.
      1. For each Record { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } _cell_ of _finalizationRegistry_.[[Cells]], do
        1. If _cell_.[[UnregisterToken]] is not ~empty~ and SameValue(_cell_.[[UnregisterToken]], _unregisterToken_) is *true*, then
          1. Remove _cell_ from _finalizationRegistry_.[[Cells]].
          1. Set _removed_ to *true*.
      1. Return _removed_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-modifications-to-liveness">
  <h1>Modifications to definitions of Liveness</h1>
  <emu-clause id="sec-liveness">
    <h1>Liveness</h1>

    <p>For some set of symbols and objects _S_, a <dfn>hypothetical WeakRef-oblivious</dfn> execution with respect to _S_ is an execution whereby the abstract operation WeakRefDeref of a WeakRef whose referent is an element of _S_ always returns *undefined*.</p>

    <emu-note>
      WeakRef-obliviousness, together with liveness, capture two notions. One, that a WeakRef itself does not keep a reference alive. Two, that cycles in liveness does not imply that a reference is live. To be concrete, if determining _ref_'s liveness depends on determining the liveness of another WeakRef referent, _ref2_, _ref2_'s liveness cannot assume _ref_'s liveness, which would be circular reasoning.
    </emu-note>
    <emu-note>
      WeakRef-obliviousness is defined on sets of symbols or objects instead of individual references to account for cycles. If it were defined on individual values, then a reference in a cycle will be considered live even though its respective value is only observed via WeakRefs of other references in the cycle.
    </emu-note>
    <emu-note>
      Colloquially, we say that an individual symbol or object is live if every set of symbols and/or objects containing it is live.
    </emu-note>

    <p>At any point during evaluation, a set of symbols and/or _S_ is considered <dfn>live</dfn> if either of the following conditions is met:</p>

    <ul>
      <li>
        Any element in _S_ is included in any agent's [[KeptAlive]] List.
      </li>
      <li>
        There exists a valid future hypothetical WeakRef-oblivious execution with respect to _S_ that observes the value of any symbol or object in _S_.
      </li>
    </ul>
    <emu-note>
      The second condition above intends to capture the intuition that a reference is live if its identity is observable via non-WeakRef means. An reference value's identity may be observed by observing a strict equality comparison or observing the value being used as key in a Map.
    </emu-note>
    <emu-note>
      <p>Presence of a symbol or an object in a field, an internal slot, or a property does not imply that the reference is live. For example if the reference in question is never passed back to the program, then it cannot be observed.</p>

      <p>This is the case for keys in a WeakMap, members of a WeakSet, as well as the [[WeakRefTarget]] and [[UnregisterToken]] fields of a FinalizationRegistry Cell record.</p>

      <p>The above definition implies that, if a key in a WeakMap is not live, then its corresponding value is not necessarily live either.</p>
    </emu-note>
    <emu-note>
      Presence of a symbol in the GlobalSymbolRegistry List might keep the reference alive. Symbol values might have their liveness compromised if contained in the GlobalSymbolRegistry List as it is globablly avaialble and shared by all realms.
    </emu-note>
    <emu-note>
      Liveness is the lower bound for guaranteeing which WeakRefs engines must not empty. Liveness as defined here is undecidable. In practice, engines use conservative approximations such as reachability. There is expected to be significant implementation leeway.
    </emu-note>
  </emu-clause>
</emu-clause>
